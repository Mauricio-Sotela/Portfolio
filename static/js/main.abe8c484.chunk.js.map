{"version":3,"sources":["components/TaskBanner.js","components/TaskCreator.js","components/TaskRow.js","components/CompletedSection.js","App.js","serviceWorker.js","index.js"],"names":["TodoBanner","render","className","props","username","tasks","filter","t","done","length","Component","TodoCreator","state","newItem","updateNewTaskValue","e","setState","target","value","createNewTask","callback","type","this","onChange","placeholder","autoFocus","onClick","TodoRows","key","task","name","checked","CompletedSection","isChecked","description","App","updateTaskInputValue","newTaskItem","toggleTask","map","tableRows","doneValue","find","showCompleted","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.abe8c484.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class TodoBanner extends Component {\n  render = () => (\n    <h4 className=\"bg-info text-white text-center p-4\">\n      {this.props.username}'s Todo App (\n      {this.props.tasks.filter(t => !t.done).length} Tasks to do)\n    </h4>\n  );\n}\n","import React, { Component } from \"react\";\n\nexport default class TodoCreator extends Component {\n  state = {\n    newItem: \"\"\n  };\n\n  updateNewTaskValue = e => {\n      this.setState({newItem: e.target.value });\n  }\n\n  createNewTask = () => {\n      this.props.callback(this.state.newItem);\n      this.setState({newItem: ''});\n  }\n\n  render() {\n    return (\n      <div className=\"my-3\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          value={this.state.newItem}\n          onChange={this.updateNewTaskValue}\n          placeholder=\"New Task\"\n          autoFocus\n        />\n        <button className=\"btn btn-success btn-block mt-1\" onClick={this.createNewTask}>\n          Add\n        </button>\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\n\nexport default class TodoRows extends Component {\n  render() {\n    return (\n      <tr key={this.props.task.name}>\n        <td>{this.props.task.name}</td>\n        <td>\n          <input\n            type=\"checkbox\"\n            checked={this.props.task.done}\n            onChange={() => this.props.callback(this.props.task)}\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class CompletedSection extends Component {\n  render = () => (\n    <div className=\"form-check\">\n      <input\n        type=\"checkbox\"\n        className=\"form-check-input\"\n        checked={this.props.isChecked}\n        onChange={e => this.props.callback(e.target.checked)}\n      />\n      <label className=\"form-check-label\">\n          Show { this.props.description }\n      </label>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\n\nimport TaskBanner from \"./components/TaskBanner\";\nimport TaskCreator from \"./components/TaskCreator\";\nimport TaskRow from \"./components/TaskRow\";\nimport CompletedSection from \"./components/CompletedSection\";\n\nimport \"./App.css\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"Mauricio\",\n      tasks: [],\n      showCompleted: true\n    };\n  }\n\n  updateTaskInputValue = e => {\n    this.setState({ newTaskItem: e.target.value });\n  };\n\n  toggleTask = task =>\n    this.setState({\n      tasks: this.state.tasks.map(t =>\n        t.name === task.name ? { ...t, done: !t.done } : t\n      )\n    });\n\n  tableRows = doneValue =>\n    this.state.tasks\n      .filter(t => t.done === doneValue)\n      .map(task => (\n        <TaskRow key={task.name} task={task} callback={this.toggleTask} />\n      ));\n\n  createNewTask = task => {\n    if (!this.state.tasks.find(t => t.name === task)) {\n      this.setState(\n        {\n          tasks: [...this.state.tasks, { name: task, done: false }]\n        },\n        // () => localStorage.setItem(\"tasks\", JSON.stringify(this.state))\n      );\n    }\n  };\n\n  // componentDidMount = () => {\n  //   const data = localStorage.getItem(\"tasks\");\n  //   this.setState(\n  //     data != null\n  //       ? JSON.parse(data)\n  //       : {\n  //           username: \"Mauricio\",\n  //           tasks: [],\n  //           showCompleted: true\n  //         }\n  //   );\n  // };\n\n  render = () => (\n    <div>\n      <TaskBanner username={this.state.username} tasks={this.state.tasks} />\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-4 mx-auto\">\n            <TaskCreator callback={this.createNewTask} />\n\n            <table className=\"table table-striped table-bordered\">\n              <thead>\n                <tr>\n                  <th>Description</th>\n                  <th>Done</th>\n                </tr>\n              </thead>\n              <tbody>{this.tableRows(false)}</tbody>\n            </table>\n\n            <div className=\"bg-info text-white text-center p-2\">\n              <CompletedSection\n                description=\"Completed Tasks\"\n                isChecked={this.state.showCompleted}\n                callback={checked => this.setState({ showCompleted: checked })}\n              />\n            </div>\n\n            {this.state.showCompleted && (\n              <table className=\"table table-striped table-bordered\">\n                <thead>\n                  <tr>\n                    <th>Description</th>\n                    <th>Done</th>\n                  </tr>\n                </thead>\n                <tbody>{this.tableRows(true)}</tbody>\n              </table>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootswatch/dist/pulse/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}